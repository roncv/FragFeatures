"""
Process the duck output for the feature of a compound.
"""

import json
import os

INTERACTION_TYPES = {
    frozenset(["Donor", "Acceptor"]): "H-bond",
    frozenset(["Aromatic", "Aromatic"]): "Pi-stacking",
    frozenset(["Hydrophobe", "Hydrophobe"]): "Hydrophobic",
    frozenset(["PosIonizable", "NegIonizable"]): "Salt-bridge",
    frozenset(["PosIonizable", "Aromatic"]): "Cation-pi",
}


class DUckFeature:
    """
    Process the FragFeature metadata for a compound's feature.
    """

    def __init__(self, feature_dir):
        self.feature_dir = feature_dir

    def get_ligand_feature_files(self):
        """
        Return a list of all the ligand feature metadata files.
        """
        # Check for ligand_feature_metadata*.json pattern (Generated by FragFeature)
        ligand_feature_files = [
            file
            for file in os.listdir(self.feature_dir)
            if file.startswith("ligand_feature_metadata") and file.endswith(".json")
        ]
        if not ligand_feature_files:
            raise FileNotFoundError(
                "No ligand feature files found in the feature directory."
            )
        # print(ligand_feature_files)

        return ligand_feature_files

    def get_feature_metadata(self):
        """
        Return the feature metadata for a compound.
        """
        protein_features = self.json_to_dict(filename="feature_metadata.json")
        self.DUck_feature = protein_features["DUck_feature"]
        self.protein_feature_family = protein_features["prot_feature_family"]
        self.residue_name = protein_features["prot_residue_name"]
        self.res_num = protein_features["prot_res_num"]
        self.res_chain = protein_features["prot_chain"]
        self.atom_nums = protein_features["prot_atom_idxs"]


        ligand_features = self.json_to_dict(filename="ligand_feature_metadata.json")
        self.ligand_atom_names = ligand_features["atom_names"]
        # NOTE: Attribute name change
        self.ligand_interaction_distance = ligand_features["interaction_distance"]
        self.ligand_atom_charges = ligand_features["atom_charges"]
        self.ligand_smarts_substructure = ligand_features["smarts_substructure"]
        self.dha_angle = ligand_features["dha_angle"]

        # ligand_feature_families = []
        # ligand_atom_names = []
        # ligand_interaction_distances = []
        # for lig_feat in self.get_ligand_feature_files():
        #     ligand_features = self.json_to_dict(filename=lig_feat)
        #     ligand_feature_families.append(ligand_features["feature_family"])
        #     ligand_atom_names.append(ligand_features["atoms_names"])
        #     ligand_interaction_distances.append(
        #         sum(ligand_features["interaction_distances"])
        #         / len(ligand_features["interaction_distances"])
        #     )

        # self.ligand_feature_families = ligand_feature_families
        # self.ligand_atom_names = ligand_atom_names
        # self.ligand_interaction_distances = ligand_interaction_distances

        # # Determine what kind of interaction it is from INTERACTION_TYPES
        # # TODO: Is there a way to get this from ProLIF?
        # interaction_types = []
        # for ligand_feature_family in self.ligand_feature_families:
        #     feature_pair = frozenset(
        #         [ligand_feature_family, self.protein_feature_family]
        #     )
        #     interaction_type = INTERACTION_TYPES.get(feature_pair)
        #     if interaction_type:
        #         interaction_types.append(interaction_type)
        #     else:
        #         interaction_types.append("Unknown")
        # self.interaction_types = interaction_types


        # Check if all the items in self.interaction_types are the same value
        # self.interaction_type is a single interaction type
        # if len(set(self.interaction_types)) == 1:
        #     self.mixed = False
        #     self.interaction_type = self.interaction_types[0]
        # else:
        #     self.mixed = True
        #     self.interaction_type = None

    # TODO: Move to utils.py??
    def json_to_dict(self, filename=None):
        """
        Read in a json file as a dictionary.
        """
        json_file = os.path.join(self.feature_dir, filename)
        if not os.path.isfile(json_file):
            raise FileNotFoundError(f"`{filename}` not found in the feature directory.")

        # Read the json file
        with open(json_file, "r") as file:
            data = json.load(file)
        # print(data)
        return data

    def from_pickle(self):
        """
        Load the features' original `Pose()` object from a pickle file.
        """
        pass


# Test
if __name__ == "__main__":
    duck_feature = DUckFeature(
        "/Users/nfo24278/Documents/dphil/diamond/DuCK/structures/CHIKV_Mac_simulations/Experiment/cx0270a/A_ARG_144_NH1"
    )
    # duck_feature.json_to_dict(filename='protein_feature_metadata.json')
    duck_feature.get_feature_metadata()
    # print(duck_feature.protein_feature_family)
